/// start - udc.loadmask
/*
 * UDC Qualified Name: udc.loadmask
 * App URI: udc/loadmask
 * Source Location: udc/loadmask.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/loadmask", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			
			// Header
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.setClasses(["cl-loadmask", "cl-overlay"]);
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container();
			group_1.style.setClasses(["cl-dialog"]);
			group_1.style.css({
				"border-right-style" : "solid",
				"border-top-width" : "2px",
				"border-bottom-color" : "#959697",
				"border-right-width" : "2px",
				"border-left-color" : "#959697",
				"border-right-color" : "#959697",
				"border-left-width" : "2px",
				"border-top-style" : "solid",
				"background-color" : "#ffffff",
				"border-left-style" : "solid",
				"border-bottom-width" : "2px",
				"border-top-color" : "#959697",
				"border-bottom-style" : "solid"
			});
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var output_1 = new cpr.controls.Output();
				output_1.value = "3~4분이상 소요됩니다.";
				output_1.style.css({
					"padding" : "7px 0px 0px 40px",
					"background-repeat" : "no-repeat",
					"font-weight" : "bold",
					"background-image" : "url('image/loader.gif')"
				});
				container.addChild(output_1, {
					"width": "252px",
					"height": "38px",
					"left": "calc(50% - 126px)",
					"top": "calc(50% - 19px)"
				});
			})(group_1);
			container.addChild(group_1, {
				"width": "400px",
				"height": "200px",
				"left": "calc(50% - 200px)",
				"top": "calc(50% - 100px)"
			});
		}
	});
	
	// Type declaration for loadmask
	cpr.utils.Util.ensurePackage("udc").loadmask = function(id){
		cpr.controls.UDCBase.call(this, "udc.loadmask", internalApp, id);
	};
	
	udc.loadmask.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.loadmask.prototype, "type", {
		get : function(){
			return "udc.loadmask";
		},
		
		configurable: true
	});
	
	// App Properties
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.loadmask
/// start - udc.ChartShell
/*
 * UDC Qualified Name: udc.ChartShell
 * App URI: udc/ChartShell
 * Source Location: udc/ChartShell.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/ChartShell", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * echartShell.js
			 * Created at 2019. 9. 4. 오후 7:12:45.
			 *
			 * @author HANS
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};
			
			
			
			/*
			 * 쉘에서 init 이벤트 발생 시 호출.
			 */
			function onShl1Init(/* cpr.events.CUIEvent */ e){
				/** 
				 * @type cpr.controls.UIControlShell
				 */
				var uIControlShell = e.control;
				// chart가 새로 그려지기 전에 기존에 echart 관련 객체가 있으면 삭제한다.
				var shellDiv = e.content;
				if(shellDiv){
					var instance = echarts.getInstanceByDom(shellDiv);
					if(instance){
						instance.dispose();
					}
				}
				if(!e.content){
					window.addEventListener("resize",function(){resizeChart()});
				}
			}
			
			var myChart = null;
			function resizeChart(){
				if(myChart){
					myChart.resize();
				}
			}
			
			
			
			/*
			 * 쉘에서 load 이벤트 발생 시 호출.
			 */
			function onShl1Load(/* cpr.events.CUIEvent */ e){
				/** 
				 * @type cpr.controls.UIControlShell
				 */
				var uIControlShell = e.control;
				// div에 echart를 입히는 코드
				var shellDiv = e.content;
				if(!shellDiv){
					return;
				}
				myChart = echarts.init(shellDiv);
				myChart.resize();
				//차트에 들어가는 데이터나 x,y축에 대한 정보 등등을 작성할 수 있습니다.
				
			//	var vcDataSet = app.getAppProperty("dataSetId");
			//	
			//	var option = {
			//		title : {
			//			text : 'ECharts 연동 예제'
			//		},
			//		tooltip : {},
			//		legend : {
			//			data : [ 'Sales' , 'Marketing', "R&D"]
			//		},
			//		xAxis : {
			//			data : [ "shirt", "cardign", "chiffon shirt", "pants", "heels", "socks" ]
			//		},
			//		yAxis : {},
			//		series : [ {
			//			name : 'Sales',
			//			type : 'bar',
			//			data : [ 5, 20, 36, 10, 10, 20 ]
			//		},
			//		{
			//			name : 'Marketing',
			//			type : 'line',
			//			data : [ 15, 25, 20, 25, 24, 40 ]
			//		},
			//		{
			//			name : 'R&D',
			//			type : 'bar',
			//			data : [ 15, 20, 35, 33, 40, 35 ]
			//		}]
			//	};
			//	myChart.setOption(option);
			}
			
			
			/*
			 * 쉘에서 dispose 이벤트 발생 시 호출.
			 * 컨트롤이 dispose될 때 호출되는 이벤트.
			 */
			function onShl1Dispose(/* cpr.events.CEvent */ e){
				window.removeEventListener("resize",resizeChart);
				myChart = null;
				
			}
			
			
			/*
			 * Body에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
			}
			
			
			/*
			 * Body에서 init 이벤트 발생 시 호출.
			 * 앱이 최초 구성될 때 발생하는 이벤트 입니다.
			 */
			function onBodyInit(/* cpr.events.CEvent */ e){
				
			}
			
			
			/*
			 * Body에서 property-change 이벤트 발생 시 호출.
			 * 앱의 속성이 변경될 때 발생하는 이벤트 입니다.
			 */
			function onBodyPropertyChange(/* cpr.events.CPropertyChangeEvent */ e){
				
			//	console.log("property-change");
			
				if(e.property == "option") {
					
					myChart.setOption(app.getAppProperty("option"));
				}
			};
			// End - User Script
			
			// Header
			app.declareAppProperty("option", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var uIControlShell_1 = new cpr.controls.UIControlShell("shl1");
			uIControlShell_1.style.css({
				"color" : "while"
			});
			if(typeof onShl1Init == "function") {
				uIControlShell_1.addEventListener("init", onShl1Init);
			}
			if(typeof onShl1Load == "function") {
				uIControlShell_1.addEventListener("load", onShl1Load);
			}
			if(typeof onShl1Dispose == "function") {
				uIControlShell_1.addEventListener("dispose", onShl1Dispose);
			}
			container.addChild(uIControlShell_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			if(typeof onBodyInit == "function"){
				app.addEventListener("init", onBodyInit);
			}
			if(typeof onBodyPropertyChange == "function"){
				app.addEventListener("property-change", onBodyPropertyChange);
			}
		}
	});
	
	// Type declaration for ChartShell
	cpr.utils.Util.ensurePackage("udc").ChartShell = function(id){
		cpr.controls.UDCBase.call(this, "udc.ChartShell", internalApp, id);
	};
	
	udc.ChartShell.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.ChartShell.prototype, "type", {
		get : function(){
			return "udc.ChartShell";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.ChartShell.prototype, "option", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("option");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("option", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.ChartShell
/// start - udc.judgeExample
/*
 * UDC Qualified Name: udc.judgeExample
 * App URI: udc/judgeExample
 * Source Location: udc/judgeExample.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/judgeExample", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * judgeExample.js
			 * Created at 2019. 12. 6. 오전 10:52:46.
			 *
			 * @author 성민
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};;
			// End - User Script
			
			// Header
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container();
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var output_1 = new cpr.controls.Output();
				output_1.style.css({
					"background-image" : "url('image/ex1.jpg')"
				});
				container.addChild(output_1, {
					"top": "20px",
					"left": "5px",
					"width": "366px",
					"height": "166px"
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "6px",
				"left": "-1px",
				"width": "391px",
				"height": "222px"
			});
		}
	});
	
	// Type declaration for judgeExample
	cpr.utils.Util.ensurePackage("udc").judgeExample = function(id){
		cpr.controls.UDCBase.call(this, "udc.judgeExample", internalApp, id);
	};
	
	udc.judgeExample.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.judgeExample.prototype, "type", {
		get : function(){
			return "udc.judgeExample";
		},
		
		configurable: true
	});
	
	// App Properties
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.judgeExample
/// start - udc.more
/*
 * UDC Qualified Name: udc.more
 * App URI: udc/more
 * Source Location: udc/more.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/more", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * more.js
			 * Created at 2019. 12. 6. 오후 1:43:23.
			 *
			 * @author 성민
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};
			
			
			
			/*
			 * Body에서 init 이벤트 발생 시 호출.
			 * 앱이 최초 구성될 때 발생하는 이벤트 입니다.
			 */
			function onBodyInit(/* cpr.events.CEvent */ e){
				
			}
			
			
			/*
			 * Body에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				var hostApp = app.getHost();
				
				if(hostApp) {
					
					var hostAppProperty = app.getHostProperty("initValue");
					var voAllData = hostAppProperty["count"];
					app.lookup("dsCount").build(voAllData);
					app.lookup("grd1").redraw();
				} 
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("dsCount");
			dataSet_1.parseData({
				"sortCondition": "value desc\r\n",
				"columns": [
					{
						"name": "value",
						"dataType": "expression",
						"displayOnly": true,
						"expression": "Number(val2)"
					},
					{"name": "name"},
					{
						"name": "val2",
						"dataType": "string",
						"displayOnly": false
					}
				]
			});
			app.register(dataSet_1);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"color" : "#ffffff",
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var grid_1 = new cpr.controls.Grid("grd1");
			grid_1.init({
				"dataSet": app.lookup("dsCount"),
				"columns": [
					{"width": "62px"},
					{"width": "163px"}
				],
				"header": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.targetColumnName = "value";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "빈도수";
								cell.style.css({
									"background-color" : "#626262",
									"color" : "white"
								});
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.targetColumnName = "name";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "단어";
								cell.style.css({
									"background-color" : "#626262",
									"color" : "white"
								});
							}
						}
					]
				},
				"detail": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.columnName = "value";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.columnName = "name";
							}
						}
					]
				}
			});
			grid_1.style.css({
				"background-color" : "white",
				"color" : "black",
				"font-family" : "@HY견고딕",
				"background-image" : "none"
			});
			container.addChild(grid_1, {
				"top": "10px",
				"right": "10px",
				"bottom": "10px",
				"left": "10px"
			});
			if(typeof onBodyInit == "function"){
				app.addEventListener("init", onBodyInit);
			}
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	
	// Type declaration for more
	cpr.utils.Util.ensurePackage("udc").more = function(id){
		cpr.controls.UDCBase.call(this, "udc.more", internalApp, id);
	};
	
	udc.more.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.more.prototype, "type", {
		get : function(){
			return "udc.more";
		},
		
		configurable: true
	});
	
	// App Properties
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.more
